@page "/ethor/delete"
@using eThorWebApp.Shared.Models
@inject HttpClient Http
 
<Breadcrumb>
    <BreadcrumbItem><a href="#">Ehor</a></BreadcrumbItem>
    <BreadcrumbItem IsActive="true">Delete</BreadcrumbItem>
</Breadcrumb>
@if (Entity == null)
{
<BlazorButton ButtonType="ButtonType.Link" bind-value="@entityId" OnClick="@onDeleteEntity">
    <i class="zmdi zmdi-delete"></i>
</BlazorButton>

}
else
{
<Modal data-bind="entityId" IsOpen="@IsModalOpen" IsCentered="true">
    <ModalHeader>
        <Breadcrumb>
            <BreadcrumbItem><a href="#">Ehor</a></BreadcrumbItem>
            <BreadcrumbItem IsActive="true">Delete</BreadcrumbItem>
        </Breadcrumb>
    </ModalHeader>
    <ModalBody>
        Are you sure you want to delete ?
    </ModalBody>
    <ModalFooter>
        <BlazorButton Color="Color.Secondary" data-dismiss="modal">Cancel</BlazorButton>
        <BlazorButton Color="Color.Danger" OnClick="@onDeleteEntity">Delete</BlazorButton>
    </ModalFooter>
</Modal>
}

@functions {

    private eThorTestEntity Entity { get; set; } = null;

    [Parameter]
    public int? entityId { get; set; } = null;

    bool IsModalOpen { get; set; }
    private void onDeleteEntity(UIMouseEventArgs e)
    {
        if(Entity!=null)
        {
            IsModalOpen = !IsModalOpen;
        }

    }

    protected override async Task OnParametersSetAsync()
    {
        if(entityId != null)
        {
            Entity = await Http.GetJsonAsync<eThorTestEntity>("api/eThorEntity/" + entityId.ToString());
            StateHasChanged();
        }
    }

}
