@page "/ethor/edit/{entityId}"
@using eThorWebApp.Shared.Models
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IUriHelper UriHelper

@if (!IsModalOpen)
{
    <BlazorButton ButtonType="ButtonType.Link" Color="Color.Link" bind-value="@entityId" OnClick="@onEditEntity">
      <i class="zmdi zmdi-edit"></i>
    </BlazorButton>

}
else
{
    <Modal data-bind="@entityId" IsOpen="@IsModalOpen" IsCentered="true">
        <ModalHeader>
            <Breadcrumb>
            <BreadcrumbItem><a href="#">Ehor</a></BreadcrumbItem>
            <BreadcrumbItem IsActive="true">Edit</BreadcrumbItem>
        </Breadcrumb>
        </ModalHeader>
        <ModalBody>
            <BlazorForm OnSubmit="@onSaveEntity">
                <FormGroup>
                    <BlazorLabel For="Id">Id</BlazorLabel>
                    <BlazorInput Id="Id" IsReadonly="true" InputType="InputType.Text" Value="@Entity.Id.ToString()" />

                    <BlazorLabel For="Name">Name</BlazorLabel>
                    <BlazorInput Id="Name" InputType="InputType.Text" Value="@Entity.Name" />

                    <BlazorLabel For="HardPropertyList">HardPropertyList</BlazorLabel>
                    <BlazorInput Id="HardPropertyList" InputType="InputType.TextArea" Value="@printList()"></BlazorInput>
                </FormGroup>
            </BlazorForm>
        </ModalBody>
        <ModalFooter>
            <BlazorButton Color="Color.Secondary" onclick="@onClose" data-dismiss="modal">Close</BlazorButton>
            <BlazorButton Color="Color.Primary" ButtonType="ButtonType.Submit">Save Changes</BlazorButton>
        </ModalFooter>
    </Modal>
}

@functions {

    private eThorTestEntity Entity { get; set; } = null;

    [Parameter]
    public int entityId { get; set; }

    bool IsModalOpen { get; set; }
    private void onEditEntity(UIMouseEventArgs e)
    {
        if(Entity!=null)
        {
            IsModalOpen = !IsModalOpen;
        }

    }

    protected override async Task OnInitAsync()
    {
        Entity = await Http.GetJsonAsync<eThorTestEntity>("api/eThorEntity/" + entityId);

    }

    public void onClose()
    {
        IsModalOpen = false;
        UriHelper.NavigateTo("/ethor");
    }

    public async void onSaveEntity()
    {
        string json = JsonConvert.SerializeObject(Entity);

        await Http.PutJsonAsync("api/eThorEntity/", json);
        IsModalOpen = false;
        UriHelper.NavigateTo("/ethor");

    }

    public string printList()
    {
        return string.Join(System.Environment.NewLine, Entity.HardPropertyList.ToArray());
    }
}
