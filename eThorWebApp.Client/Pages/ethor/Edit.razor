@page "/ethor/edit/{entityId}"
@using eThorWebApp.Shared.Models
@inject HttpClient Http
@inject  IJSRuntime JSRuntime

@if (Entity == null)
{
    <BlazorButton Color="Color.Primary" ButtonType="ButtonType.Link" bind-value="@entityId" OnClick="@onEditEntity">Edit</BlazorButton>
}
else
{
    <Modal data-bind="entityId" IsOpen="@IsModalOpen" IsCentered="true">
        <ModalHeader>
            <Breadcrumb>
            <BreadcrumbItem><a href="#">Ehor</a></BreadcrumbItem>
            <BreadcrumbItem IsActive="true">Edit</BreadcrumbItem>
        </Breadcrumb>
        </ModalHeader>
        <ModalBody>
            <BlazorForm>
                <FormGroup>
                    <BlazorLabel For="Id">Id</BlazorLabel>
                    <BlazorInput Id="Id" InputType="InputType.Text" Value="@Entity.Id.ToString()" />

                    <BlazorLabel For="Name">Name</BlazorLabel>
                    <BlazorInput Id="Name" InputType="InputType.Text" Value="@Entity.Name" />

                </FormGroup>
            </BlazorForm>
        </ModalBody>
        <ModalFooter>
            <BlazorButton Color="Color.Secondary" data-dismiss="modal">Close</BlazorButton>
            <BlazorButton Color="Color.Primary" OnClick="@onSaveEntity">Save Changes</BlazorButton>
        </ModalFooter>
    </Modal>
}

@functions {

    private eThorTestEntity Entity { get; set; } = null;

    [Parameter]
    public int? entityId { get; set; } = null;



    //protected override async Task OnInitAsync()
    //{
    //    Entity = await Http.GetJsonAsync<eThorTestEntity>("api/eThorEntity" + entityId.ToString());
    //}

    bool IsModalOpen { get; set; }
    private async Task onEditEntity(UIMouseEventArgs e)
    {
        if(entityId == null)
        {
            return;
        }
        Console.WriteLine("entityId is set to " + entityId.ToString());

        Entity = await Http.GetJsonAsync<eThorTestEntity>("api/eThorEntity/" + entityId.ToString());
        IsModalOpen = !IsModalOpen;
        StateHasChanged();
    }

    void onSaveEntity(UIMouseEventArgs e)
    {
        StateHasChanged();
    }

    //int count = 0;
    //protected override void OnAfterRender()
    //{
    //    count++;
    //    Console.WriteLine($"OnAfterRender execution count: {count}");
    //}

    protected override async Task OnAfterRenderAsync()
    {
        // Initialize JavaScript library
        //await JSRuntime.InvokeAsync<bool>("JsFunctions.getBasicProfile", "Modal has been initialized successfully.");
    }
}
